<fragment>
  <choose>
    <when condition="@(!context.Request.Headers.ContainsKey("Authorization"))">
      <return-response>
        <set-status code="401" reason="Unauthorized" />
        <set-body>Missing Authorization header</set-body>
      </return-response>
    </when>
  </choose>
  <!-- Extract 'iss' claim -->
  <set-variable name="jwtIssuer" value="@{
    Jwt jwt;
    context.Request.Headers.GetValueOrDefault("Authorization", "").Split(' ').Last().TryParseJwt(out jwt);
    return jwt?.Claims.GetValueOrDefault("iss", "");
  }" />
  <!-- Store useOpenId as string 'true' or 'false' -->
  <set-variable name="useOpenId" value="@(
    (context.Variables.GetValueOrDefault<string>("jwtIssuer")?.Contains("jwt-issuer-service") == true).ToString()
    )" />
  <!-- Conditional validation -->
  <choose>
  <when condition="@(bool.Parse(context.Variables.GetValueOrDefault<string>("useOpenId")))">
  <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" output-token-variable-name="jwtToken">
    <openid-config url="https://${ecommerce_ingress_hostname}/pagopa-jwt-issuer-service/.well-known/openid-configuration" />
    <audiences>
      <audience>iosession</audience>
    </audiences>
    <required-claims>
      <claim name="userId" match="all">
      </claim>
      <claim name="email" match="all">
      </claim>
    </required-claims>
  </validate-jwt>
  </when>
  <otherwise>
  <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" output-token-variable-name="jwtToken">
    <issuer-signing-keys>
      <key>{{pagopa-wallet-session-jwt-signing-key}}</key>
    </issuer-signing-keys>
    <required-claims>
      <claim name="userId" match="all">
      </claim>
      <claim name="email" match="all">
      </claim>
    </required-claims>
  </validate-jwt>
  </otherwise>
    </choose>
  <set-variable name="xUserId" value="@{
          var jwt = (Jwt)context.Variables["jwtToken"];
          if(jwt.Claims.ContainsKey("userId")){
              return jwt.Claims["userId"][0];
          }
          return "";
    }" />
  <set-variable name="email" value="@{
          var jwt = (Jwt)context.Variables["jwtToken"];
          if(jwt.Claims.ContainsKey("email")){
              return jwt.Claims["email"][0];
          }
          return "";
    }" />
</fragment>
