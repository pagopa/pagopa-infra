{
    "name": "Ricavo la data di start",
    "type": "SetVariable",
    "dependsOn": [],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "date_trigger",
        "value": {
            "value": "@addDays(convertFromUtc(pipeline().TriggerTime, 'W. Europe Standard Time'), -11)",
            "type": "Expression"
        }
    }
},
{
    "name": "Imposto la data di inizio",
    "type": "SetVariable",
    "dependsOn": [
        {
            "activity": "Ricavo la data di start",
            "dependencyConditions": [
                "Completed"
            ]
        }
    ],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "date_start",
        "value": {
            "value": "@startOfDay(variables('date_trigger'))",
            "type": "Expression"
        }
    }
},
{
    "name": "Imposto la data di fine",
    "type": "SetVariable",
    "dependsOn": [
        {
            "activity": "Imposto la data di inizio",
            "dependencyConditions": [
                "Completed"
            ]
        }
    ],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "date_end",
        "value": {
            "value": "@addMinutes(variables('date_start'),1440)",
            "type": "Expression"
        }
    }
},
{
    "name": "Imposto solo la data",
    "type": "SetVariable",
    "dependsOn": [
        {
            "activity": "Imposto la data di fine",
            "dependencyConditions": [
                "Completed"
            ]
        }
    ],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "date_only",
        "value": {
            "value": "@formatDateTime(variables('date_start'), 'yyyy-MM-dd')",
            "type": "Expression"
        }
    }
},
{
    "name": "Elaborazione Dati",
    "type": "Copy",
    "dependsOn": [
        {
            "activity": "Imposto solo la data",
            "dependencyConditions": [
                "Completed"
            ]
        }
    ],
    "policy": {
        "timeout": "0.12:00:00",
        "retry": 0,
        "retryIntervalInSeconds": 30,
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "source": {
            "type": "AzureDataExplorerSource",
            "query": {
                "value": "let start=datetime('@{variables('date_start')}');\nlet end=datetime('@{variables('date_end')}');\nlet versamenti_assenti = KPI_RENDICONTAZIONI_DETAILS\n| where DATA_PAGAMENTO between (start .. end)\n| where IS_REND == false\n| distinct ID_PSP, ID_BROKER_PSP, PA_TRANSFER\n| summarize FLUSSI_ASSENTI=count() by ID_PSP, ID_BROKER_PSP;\nlet versamenti_presenti = KPI_RENDICONTAZIONI_DETAILS\n| where DATA_PAGAMENTO between (start .. end)\n| where IS_REND == true\n| distinct ID_PSP, ID_BROKER_PSP, PA_TRANSFER\n| summarize FLUSSI_PRESENTI=count() by ID_PSP, ID_BROKER_PSP;\nlet totale_versato = versamenti_presenti // qui copro il KPI #2\n| join kind=fullouter versamenti_assenti on ID_PSP, ID_BROKER_PSP\n| extend FLUSSI_ASSENTI=case(isempty(FLUSSI_ASSENTI), 0, FLUSSI_ASSENTI)\n| extend FLUSSI_PRESENTI=case(isempty(FLUSSI_PRESENTI), 0, FLUSSI_PRESENTI)\n| extend ID_BROKER_PSP=case(isempty(ID_BROKER_PSP), ID_BROKER_PSP1, ID_BROKER_PSP)\n| extend ID_PSP=case(isempty(ID_PSP), ID_PSP1, ID_PSP)\n| extend TOTALE_FLUSSI=FLUSSI_ASSENTI + FLUSSI_PRESENTI\n| extend GIORNATA_PAGAMENTO=format_datetime(start, \"yyyy-MM-dd\")\n| project GIORNATA_PAGAMENTO, ID_BROKER_PSP, ID_PSP, TOTALE_FLUSSI, FLUSSI_ASSENTI, FLUSSI_PRESENTI;\nlet ritardi_flussi_first_version = KPI_RENDICONTAZIONI_DETAILS\n| where DATA_PAGAMENTO between (start .. end)\n| where IS_REND == true\n| where DIFF_DAYS_FIRST_VERSION > 0\n| distinct ID_PSP, ID_BROKER_PSP, PA_TRANSFER\n| summarize FDR_IN_RITARDO_FIRST_VERSION=count() by ID_PSP, ID_BROKER_PSP;\nlet ritardi_flussi_last_version = KPI_RENDICONTAZIONI_DETAILS\n| where DATA_PAGAMENTO between (start .. end)\n| where IS_REND == true\n| where DIFF_DAYS_LAST_VERSION > 3\n| distinct ID_PSP, ID_BROKER_PSP, PA_TRANSFER\n| summarize FDR_IN_RITARDO_LAST_VERSION=count() by ID_PSP, ID_BROKER_PSP;\nlet flussi_in_ritardo = ritardi_flussi_first_version\n| join kind=leftouter ritardi_flussi_last_version on ID_PSP, ID_BROKER_PSP\n| project ID_PSP, ID_BROKER_PSP, FDR_IN_RITARDO_FIRST_VERSION, FDR_IN_RITARDO_LAST_VERSION\n| extend FDR_IN_RITARDO_LAST_VERSION=case(isempty(FDR_IN_RITARDO_LAST_VERSION), 0, FDR_IN_RITARDO_LAST_VERSION)\n| extend FDR_IN_RITARDO_FIRST_VERSION=case(isempty(FDR_IN_RITARDO_FIRST_VERSION), 0, FDR_IN_RITARDO_FIRST_VERSION);\nlet _all_flux_stored = FLUSSI_RENDICONTAZIONE\n| where INSERTED_TIMESTAMP between (start .. end);\nlet all_info_flux = FLUSSI_RENDICONTAZIONE\n| where INSERTED_TIMESTAMP between (start .. end)\n| extend IS_LOADED_FLUX=true\n| project ID_FLUSSO, UNIQUE_ID, NUM_PAGAMENTI, SOMMA_VERSATA, IS_LOADED_FLUX, ALL_DATES;\nlet all_dates_iuv = all_info_flux\n| mv-expand ALL_DATES.dates, ALL_DATES\n| extend REAL_DATE=case(isempty(ALL_DATES_dates), ALL_DATES, ALL_DATES_dates)\n| extend DATE_PAGAMENTO=todatetime(REAL_DATE)\n| distinct DATE_PAGAMENTO\n| where DATE_PAGAMENTO != \"\";\nlet all_iuv_rendicontati = IUV_RENDICONTATI\n| where DATA_ESITO_SINGOLO_PAGAMENTO in (all_dates_iuv)\n| summarize PAGAMENTI_RENDICONTATI=count(), IMPORTO_RENDICONTATO=sum(IMPORTO) by ID_FLUSSO, UNIQUE_ID,PSP, INT_PSP;\nlet info_kpi_error = all_info_flux\n| join kind=leftouter all_iuv_rendicontati on ID_FLUSSO, UNIQUE_ID\n| project-rename PAGAMENTI_DICHIARATI=NUM_PAGAMENTI, IMPORTO_DICHIARATO=SOMMA_VERSATA\n| project ID_FLUSSO, UNIQUE_ID, PAGAMENTI_DICHIARATI, IMPORTO_DICHIARATO, PAGAMENTI_RENDICONTATI, IMPORTO_RENDICONTATO, IS_LOADED_FLUX, PSP, INT_PSP\n| extend HAS_DIFF_AMOUNT=case(IMPORTO_DICHIARATO != IMPORTO_RENDICONTATO, true, false)\n| extend HAS_DIFF_NUM=case(PAGAMENTI_DICHIARATI != PAGAMENTI_RENDICONTATI, true, false); \nlet has_diff_amount = info_kpi_error\n| where HAS_DIFF_AMOUNT == true\n| summarize TOTALE_DIFF_AMOUNT=count() by INT_PSP, PSP;\nlet has_diff_num = info_kpi_error\n| where HAS_DIFF_NUM == true\n| summarize TOTALE_DIFF_NUM=count() by INT_PSP, PSP;\ntotale_versato\n| join kind=leftouter flussi_in_ritardo on ID_PSP, ID_BROKER_PSP\n| join kind=leftouter has_diff_amount on $left.ID_PSP == $right.PSP, $left.ID_BROKER_PSP == $right.INT_PSP\n| project GIORNATA_PAGAMENTO, ID_BROKER_PSP, ID_PSP, TOTALE_FLUSSI, FLUSSI_ASSENTI, FLUSSI_PRESENTI, FDR_IN_RITARDO_FIRST_VERSION, FDR_IN_RITARDO_LAST_VERSION, TOTALE_DIFF_AMOUNT\n| join kind=leftouter has_diff_num on $left.ID_PSP == $right.PSP, $left.ID_BROKER_PSP == $right.INT_PSP\n| extend TOTALE_DIFF_AMOUNT=case(isempty(TOTALE_DIFF_AMOUNT), 0, TOTALE_DIFF_AMOUNT)\n| extend TOTALE_DIFF_NUM=case(isempty(TOTALE_DIFF_NUM), 0 , TOTALE_DIFF_NUM)\n| extend FDR_IN_RITARDO_LAST_VERSION=case(isempty(FDR_IN_RITARDO_LAST_VERSION), 0, FDR_IN_RITARDO_LAST_VERSION)\n| extend FDR_IN_RITARDO_FIRST_VERSION=case(isempty(FDR_IN_RITARDO_FIRST_VERSION), 0, FDR_IN_RITARDO_FIRST_VERSION)\n| extend GIORNATA_PAGAMENTO=todatetime(GIORNATA_PAGAMENTO)\n| project GIORNATA_PAGAMENTO, ID_BROKER_PSP, ID_PSP, TOTALE_FLUSSI, FLUSSI_ASSENTI, FLUSSI_PRESENTI, FDR_IN_RITARDO_FIRST_VERSION, FDR_IN_RITARDO_LAST_VERSION, TOTALE_DIFF_AMOUNT, TOTALE_DIFF_NUM",
                "type": "Expression"
            },
            "queryTimeout": "01:00:00",
            "noTruncation": true
        },
        "sink": {
            "type": "AzureDataExplorerSink"
        },
        "enableStaging": false,
        "translator": {
            "type": "TabularTranslator",
            "mappings": [
                {
                    "source": {
                        "name": "GIORNATA_PAGAMENTO",
                        "type": "DateTime",
                        "physicalType": "datetime"
                    },
                    "sink": {
                        "name": "GIORNATA_PAGAMENTO",
                        "type": "DateTime",
                        "physicalType": "datetime"
                    }
                },
                {
                    "source": {
                        "name": "ID_BROKER_PSP",
                        "type": "String",
                        "physicalType": "string"
                    },
                    "sink": {
                        "name": "ID_BROKER_PSP",
                        "type": "String",
                        "physicalType": "string"
                    }
                },
                {
                    "source": {
                        "name": "ID_PSP",
                        "type": "String",
                        "physicalType": "string"
                    },
                    "sink": {
                        "name": "ID_PSP",
                        "type": "String",
                        "physicalType": "string"
                    }
                },
                {
                    "source": {
                        "name": "TOTALE_FLUSSI",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "TOTALE_FLUSSI",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "FLUSSI_ASSENTI",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "FLUSSI_ASSENTI",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "FLUSSI_PRESENTI",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "FLUSSI_PRESENTI",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "FDR_IN_RITARDO_FIRST_VERSION",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "FDR_IN_RITARDO_FIRST_VERSION",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "FDR_IN_RITARDO_LAST_VERSION",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "FDR_IN_RITARDO_LAST_VERSION",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "TOTALE_DIFF_AMOUNT",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "TOTALE_DIFF_AMOUNT",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                },
                {
                    "source": {
                        "name": "TOTALE_DIFF_NUM",
                        "type": "Int64",
                        "physicalType": "long"
                    },
                    "sink": {
                        "name": "TOTALE_DIFF_NUM",
                        "type": "Int32",
                        "physicalType": "int"
                    }
                }
            ],
            "typeConversion": true,
            "typeConversionSettings": {
                "allowDataTruncation": true,
                "treatBooleanAsNumber": false
            }
        }
    },
    "inputs": [
        {
            "referenceName": "${inputdataset}",
            "type": "DatasetReference"
        }
    ],
    "outputs": [
        {
            "referenceName": "${outputdataset}",
            "type": "DatasetReference"
        }
    ]
}