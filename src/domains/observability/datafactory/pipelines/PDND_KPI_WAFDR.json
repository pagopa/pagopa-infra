{
    "name": "QueryWAFDR",
    "type": "Lookup",
    "dependsOn": [
        {
            "activity": "StartDate",
            "dependencyConditions": [
                "Succeeded"
            ]
        }
    ],
    "policy": {
        "timeout": "0.12:00:00",
        "retry": 0,
        "retryIntervalInSeconds": 30,
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "source": {
            "type": "AzureDataExplorerSource",
            "query": {
                "value": "let start=datetime('@{variables('startDate')}');\nlet end=datetime('@{variables('endDate')}');\nKPI_RENDICONTAZIONI\n| where GIORNATA_PAGAMENTO between (start .. end)\n| summarize TOTALE_FLUSSI=sum(TOTALE_FLUSSI), TOTALE_DIFF_AMOUNT=sum(TOTALE_DIFF_AMOUNT) by ID_PSP, ID_BROKER_PSP\n| join kind=inner PSP on $left.ID_PSP == $right.ID_PSP\n| join kind=inner INTERMEDIARI_PSP on $left.ID_BROKER_PSP == $right.ID_INTERMEDIARIO_PSP\n| extend kpi_id =\"WAFDR\"\n| extend PERC_KPII=(TOTALE_DIFF_AMOUNT * 100.00) / TOTALE_FLUSSI\n| extend PERC_KPI = round(iff(isfinite(PERC_KPII), PERC_KPII, 0.0), 2)\n| extend kpi_threshold=1.0\n| extend kpi_outcome = iff(PERC_KPI > kpi_threshold,\"KO\",\"OK\")\n| project kpi_id, kpi_threshold, start, end, psp_id=ID_PSP, psp_company_name=iif(DESCRIZIONE <> '' , DESCRIZIONE,RAGIONE_SOCIALE), psp_broker_id=ID_BROKER_PSP, psp_broker_company_name=INTERMEDIARIO_DESCR, PERC_KPI, kpi_outcome\n| project KPI=pack_all()",
                "type": "Expression"
            },
            "queryTimeout": "01:00:00",
            "noTruncation": true
        },
        "dataset": {
            "referenceName": "SMO_KPI_RENDICONTAZIONI_DataSet",
            "type": "DatasetReference"
        },
        "firstRowOnly": false
    }
},
{
    "name": "EndDate",
    "description": "Ricavo la data fine per prendere la mensilit√†\n",
    "type": "SetVariable",
    "dependsOn": [],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "endDate",
        "value": {
            "value": "@addDays(startOfMonth(convertFromUtc(pipeline().TriggerTime, 'W. Europe Standard Time')), -1)",
            "type": "Expression"
        }
    }
},
{
    "name": "StartDate",
    "description": "mi calcolo la data di inzio della query mese precedente primo giorno",
    "type": "SetVariable",
    "dependsOn": [
        {
            "activity": "EndDate",
            "dependencyConditions": [
                "Succeeded"
            ]
        }
    ],
    "policy": {
        "secureOutput": false,
        "secureInput": false
    },
    "userProperties": [],
    "typeProperties": {
        "variableName": "startDate",
        "value": {
            "value": "@startOfMonth(variables('endDate'))",
            "type": "Expression"
        }
    }
},
{
    "name": "ForEachKPI",
    "type": "ForEach",
    "dependsOn": [
        {
            "activity": "QueryWAFDR",
            "dependencyConditions": [
                "Succeeded"
            ]
        }
    ],
    "userProperties": [],
    "typeProperties": {
        "items": {
            "value": "@activity('QueryWAFDR').output.value",
            "type": "Expression"
        },
        "isSequential": true,
        "activities": [
            {
                "name": "GetKPI",
                "type": "SetVariable",
                "dependsOn": [],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "item",
                    "value": {
                        "value": "@concat(item().KPI, ',')",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "ConcatKPI",
                "type": "SetVariable",
                "dependsOn": [
                    {
                        "activity": "GetKPI",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "jsonChunk",
                    "value": {
                        "value": "@concat(variables('jsonResult'), variables('item'))",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "SetJsonResult",
                "type": "SetVariable",
                "dependsOn": [
                    {
                        "activity": "ConcatKPI",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "variableName": "jsonResult",
                    "value": {
                        "value": "@variables('jsonChunk')",
                        "type": "Expression"
                    }
                }
            }
        ]
    }
},
{
    "name": "CheckResult",
    "type": "IfCondition",
    "dependsOn": [
        {
            "activity": "ForEachKPI",
            "dependencyConditions": [
                "Succeeded"
            ]
        }
    ],
    "userProperties": [],
    "typeProperties": {
        "expression": {
            "value": "@greater(length(variables('jsonResult')), 0)",
            "type": "Expression"
        },
        "ifTrueActivities": [
            {
                "name": "WriteEvhub",
                "type": "WebActivity",
                "dependsOn": [],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "method": "POST",
                    "url": {
                        "value": "@concat(pipeline().globalParameters.evhBaseUrl, '/quality-improvement-psp-kpi/messages')",
                        "type": "Expression"
                    },
                    "connectVia": {
                        "referenceName": "AutoResolveIntegrationRuntime",
                        "type": "IntegrationRuntimeReference"
                    },
                    "body": {
                        "value": "@json(concat('[', variables('jsonResult'), ']'))",
                        "type": "Expression"
                    },
                    "authentication": {
                        "type": "MSI",
                        "resource": {
                            "value": "@pipeline().globalParameters.evhBaseUrl",
                            "type": "Expression"
                        }
                    }
                }
            }
        ]
    }
}