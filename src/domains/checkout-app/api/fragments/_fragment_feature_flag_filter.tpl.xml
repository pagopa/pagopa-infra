<fragment>
    <set-variable name="requestIpAddress" value="@(context.Request.Headers.GetValueOrDefault("X-Forwarded-For",""))" />
    <set-variable name="allowedIpsEnabledAuthentication" value="{{enable-checkout-authentication-ip-whitelist}}" />
    <!-- example of more feature flags -->
    <!-- <set-variable name="allowedIpsFeature_1" value="{{Feature1IpWhitelist}}" /> -->
    <!-- <set-variable name="allowedIpsFeature_2" value="{{Feature2IpWhitelist}}" /> -->
    <!-- <set-variable name="allowedIpsFeature_3" value="{{Feature3IpWhitelist}}" /> -->


    <set-variable name="checkout-feature-flag" value="@{
        bool IsIpAllowed(string allowedIps, string requestIpAddress) {
          if (allowedIps == "*") {
            return true;
          }
          var allowedIpsList = allowedIps.Split(',');
          string[] callerIps = requestIpAddress.Split(',');
          foreach (string callerIp in callerIps) {
            if (allowedIpsList.Contains(callerIp)) {
              return true;
            }
          }
          return false;
        }
    
        var response = new {
          isAuthenticationEnabled = IsIpAllowed(context.Variables.GetValueOrDefault("allowedIpsEnabledAuthentication", ""), context.Variables.GetValueOrDefault("requestIpAddress", ""))
          // Feature_1 = IsIpAllowed(context.Variables.GetValueOrDefault("allowedIpsFeature_1", ""), context.Variables.GetValueOrDefault("requestIpAddress", "")),
          // Feature_2 = IsIpAllowed(context.Variables.GetValueOrDefault("allowedIpsFeature_2", ""), context.Variables.GetValueOrDefault("requestIpAddress", "")),
          // Feature_3 = IsIpAllowed(context.Variables.GetValueOrDefault("allowedIpsFeature_3", ""), context.Variables.GetValueOrDefault("requestIpAddress", ""))
        };
        return JsonConvert.SerializeObject(response);
      }"/>
</fragment>
