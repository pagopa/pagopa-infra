<fragment>
    <set-variable name="requestIpAddress" value="@(context.Request.Headers.GetValueOrDefault("X-Forwarded-For",""))" />
    <set-variable name="featureFlagsStatusMap" value="{{checkout-feature-flag-map}}" />


    <!-- Parse the JSON feature flag status map -->
    <set-variable name="enableAuthIpWhiteList" value="@{
        var featureFlagsStatusMap = JsonConvert.DeserializeObject<Dictionary<string, string>>(context.Variables.GetValueOrDefault("featureFlagsStatusMap", "{}"));
        return featureFlagsStatusMap.GetValueOrDefault("enableAuthIpWhiteList", "-");
    }" />
    <set-variable name="enablePspPickerPageIpWhiteList" value="@{
        var featureFlagsStatusMap = JsonConvert.DeserializeObject<Dictionary<string, string>>(context.Variables.GetValueOrDefault("featureFlagsStatusMap", "{}"));
        return featureFlagsStatusMap.GetValueOrDefault("enablePspPickerPageIpWhiteList", "-");
    }" />


    <set-variable name="checkout-feature-flag" value="@{
        bool IsIpAllowed(string allowedIps, string requestIpAddress) {
          if (allowedIps == "*") {
            return true;
          }
          var allowedIpsList = allowedIps.Split(',');
          string[] callerIps = requestIpAddress.Split(',');
          foreach (string callerIp in callerIps) {
            if (allowedIpsList.Contains(callerIp)) {
              return true;
            }
          }
          return false;
        }
    
        var response = new {
            isAuthenticationEnabled = IsIpAllowed(context.Variables.GetValueOrDefault("enableAuthIpWhiteList", ""), context.Variables.GetValueOrDefault("requestIpAddress", "")),
            isPspPickerPageEnabled = IsIpAllowed(context.Variables.GetValueOrDefault("enablePspPickerPageIpWhiteList", ""), context.Variables.GetValueOrDefault("requestIpAddress", ""))
        };
        return JsonConvert.SerializeObject(response);
      }"/>
</fragment>
