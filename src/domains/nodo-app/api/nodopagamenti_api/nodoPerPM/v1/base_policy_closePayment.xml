<policies>
  <inbound>
    <!-- operation before base policy -->
    <base />
    <!-- operation after base policy -->

    <include-fragment fragment-id="ndp-extract-paymentTokens-json-policy"/>
    <include-fragment fragment-id="ndp-set-node-id-by-token-policy" />
    <include-fragment fragment-id="ndp-set-base-url-policy" />

  </inbound>
  <backend>
    <!-- operation before base policy -->
    <base />
    <!-- operation after base policy -->
  </backend>
  <outbound>
    <!-- operation before base policy -->
    <base />
    <!-- operation after base policy -->

    <!-- extract outcome -->
    <set-variable name="requestOutcome" value="@{
        try {
            JObject requestBody = (JObject) context.Request.Body.As<JObject>(preserveContent: true);
            return ((string) requestBody["outcome"]).ToUpper();
        } catch (Exception e) {
            return "NONE";
        }
    }" />
    <set-variable name="responseOutcome" value="@{
        try {
            JObject responseBody = (JObject) context.Response.Body.As<JObject>(preserveContent: true);
            return ((string) responseBody["outcome"]).ToUpper();
        } catch (Exception e) {
            return "NONE";
        }
    }" />


    <!-- Remove objects in cache iff outcome is KO, otherwise do nothing -->
    <choose>
        <!-- check if outcome in request is KO -->
        <when condition="@(context.Variables.GetValueOrDefault<string>("requestOutcome", "NONE").Equals("KO") || context.Variables.GetValueOrDefault<string>("responseOutcome", "NONE").Equals("KO"))">
            <!-- estrai tokens in split da variabile "paymentTokens", esegui fragment x5 volte -->
            <include-fragment fragment-id="ndp-end-payment-cache-removal-outbound-policy" />
        </when>
    </choose>

  </outbound>
  <on-error>
    <!-- operation before base policy -->
    <base />
    <!-- operation after base policy -->
  </on-error>
</policies>
