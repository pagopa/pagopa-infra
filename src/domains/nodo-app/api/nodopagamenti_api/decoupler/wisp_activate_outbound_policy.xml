<fragment>
  <choose>
    <!-- Caching wisp_paymenttoken key if WISP dismantling is enabled and the payment belongs to WISP dismantling -->
    <when condition="@(context.Variables.GetValueOrDefault<string>("enable_wisp_dismantling_switch", "").Equals("true") )">
    <set-variable name="wisp_fiscalcode_noticenumber" value="@{
                        try {
                            var requestData = JObject.Parse((string)context.Variables["requestData"]);
                            var noticeNumber = requestData.ContainsKey("noticeNumber") ? (string) requestData["noticeNumber"] : "";
    var ci = requestData.ContainsKey("ci") ? (string) requestData["ci"] : "";
    return "wisp_" + ci + "_" + noticeNumber;
    } catch (Exception e) {
    return "wisp_FAKE";
    }
    }" />
    <cache-lookup-value key="@((string) context.Variables["wisp_fiscalcode_noticenumber"])" variable-name="belongs_to_wisp" default-value="NONE" caching-type="external" />
    <choose>
      <when condition="@(!context.Variables.GetValueOrDefault<string>("belongs_to_wisp", "NONE").Equals("NONE"))">

      <choose>
        <when condition="@(!((string)context.Variables["paymentToken"]).Equals("NONE") )">
        <!-- acitvateResp OK with paymentToken START -->
        <!-- call create receipt timer -->
        <set-variable name="wisp-paymentToken-obj" value="@{
                          var requestData = JObject.Parse((string) context.Variables["requestData"]);
                          var noticeNumber = requestData.ContainsKey("noticeNumber") ? (string) requestData["noticeNumber"] : "";
        var ci = requestData.ContainsKey("ci") ? (string) requestData["ci"] : "";
        var paymentToken = (string)context.Variables["paymentToken"];
        var sessionId = context.Variables.ContainsKey("wisp_ecommerce_paymentNote") ? (string)context.Variables["wisp_ecommerce_paymentNote"] : "";
        return new JObject(
        new JProperty("fiscalCode", ci),
        new JProperty("noticeNumber", noticeNumber),
        new JProperty("paymentToken", paymentToken),
        new JProperty("sessionId", sessionId)
        ).ToString();
        }" />
        <!-- etichetta wisp_paymentToken -->
        <cache-store-value key="@("wisp_" + (string)context.Variables["paymentToken"])" value="@((string) context.Variables["wisp-paymentToken-obj"])" duration="172800" caching-type="external" /> <!-- TODO to change type to internal -->
        <set-variable name="paymentToken-expirationTime" value="@{
                                      var expirationTime = 30 * 60000; // 30 minutes to milliseconds
                                      // get request body content
                                      XElement request = context.Request.Body.As<XElement>(preserveContent: true);
                                      XElement body = request.Descendants(request.Name.Namespace + "Body").FirstOrDefault();
                                      try {
                                          XElement primitive = (XElement) body.FirstNode;
                                          XElement expTimeElement = primitive.Descendants("expirationTime").FirstOrDefault();
                                          if (expTimeElement != null) {
                                              expirationTime = Convert.ToInt32(expTimeElement.Value);
                                          }
                                      }
                                      catch (Exception e)
                                      {
                                          //  do nothing
                                      }
                                      return expirationTime.ToString();
                                  }" />
        <!-- deleting wisp_timer_hang will avoid multiple activations starting from the same WISP dismantling trigger (nodoInviaRPT / nodoInviaCarrelloRPT) -->
        <!-- the variable wisp_ecommerce_paymentNote is defined in decoupler-activate-inbound fragment -->
        <cache-remove-value  key="@("wisp_timer_hang_" + ((string)context.Variables["wisp_ecommerce_paymentNote"] ?? "") + (((string) context.Variables["wisp_fiscalcode_noticenumber"])).Substring(4))" caching-type="external" />
        <send-one-way-request mode="new">
          <set-url>{{wisp-dismantling-converter-base-url}}/receipt/timer</set-url>
          <set-method>POST</set-method>
          <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
          </set-header>
          <set-body>@{
            var paymentTokenObj = JObject.Parse((string)context.Variables["wisp-paymentToken-obj"]);
            paymentTokenObj["expirationTime"] = JToken.FromObject(context.Variables["paymentToken-expirationTime"]);
            return paymentTokenObj.ToString();
            }</set-body>
        </send-one-way-request>
        <!-- acitvateResp OK with paymentToken STOP -->
      </when>
      <otherwise>
        <!-- acitvateResp KO START -->
        <!-- only trace for Dismissione dash -->
        <trace source="wrn_dash_wips" severity="information">
          <message>@{
            var requestData = JObject.Parse((string) context.Variables["requestData"]);
            var noticeNumber = requestData.ContainsKey("noticeNumber") ? (string) requestData["noticeNumber"] : "";
            var ci = requestData.ContainsKey("ci") ? (string) requestData["ci"] : "";
            string error = "[WRN-DASH-WISP] " +
            "noticeNumber :" + noticeNumber + " ci: "+ ci;
            return error;
            }</message>
        </trace>
        <!-- acitvateResp KO STOP -->
      </otherwise>
    </choose>
  </when>
</choose>
  </when>
  </choose>

</fragment>
