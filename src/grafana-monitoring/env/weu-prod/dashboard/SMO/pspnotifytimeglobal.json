{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "target": {
            "limit": 100,
            "matchAny": false,
            "tags": [],
            "type": "dashboard"
          },
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 50,
    "links": [],
    "panels": [
      {
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "2mZ1xay4z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 11,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineStyle": {
                "fill": "solid"
              },
              "lineWidth": 2,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "always",
              "spanNulls": true,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "id": 4,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "hideZeros": false,
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.6.3",
        "targets": [
          {
            "database": "re",
            "datasource": {
              "type": "grafana-azure-data-explorer-datasource",
              "uid": "2mZ1xay4z"
            },
            "expression": {
              "from": {
                "property": {
                  "name": "ReEvent",
                  "type": "string"
                },
                "type": "property"
              },
              "groupBy": {
                "expressions": [],
                "type": "and"
              },
              "reduce": {
                "expressions": [],
                "type": "and"
              },
              "where": {
                "expressions": [],
                "type": "and"
              }
            },
            "pluginVersion": "4.4.0",
            "query": "let start=datetime_utc_to_local(todatetime(unixtime_milliseconds_todatetime($__from)), \"Europe/Rome\");\nlet end=datetime_utc_to_local(todatetime(unixtime_milliseconds_todatetime($__to)), \"Europe/Rome\");\nlet pspNotifyPayment_Req = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\", \"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , payload_xml)\n| extend channel = extract(\"<idChannel>(.*)</idChannel>\", 1 , payload_xml)\n| where idBrokerPSP in ($IntPSP)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, idBrokerPSP, psp, channel, sessionId, tipoEvento;\nlet pspNotifyPayment_Resp = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\", \"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"RESP\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend outcome = extract(\"<outcome>(.*)</outcome>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, sessionId, outcome, tipoEvento;\npspNotifyPayment_Req\n| join kind=leftouter pspNotifyPayment_Resp on idDominio, iuv, ccp, sessionId, tipoEvento\n| project-rename REQUEST_TIMESTAMP=dataOraEvento, RESPONSE_TIMESTAMP=dataOraEvento1\n| extend diff_time=datetime_diff(\"millisecond\", RESPONSE_TIMESTAMP, REQUEST_TIMESTAMP)\n| project REQUEST_TIMESTAMP, RESPONSE_TIMESTAMP, diff_time, idDominio, iuv, ccp, idBrokerPSP, channel, psp, outcome, sessionId\n| join kind=inner INTERMEDIARI_PSP on $left.idBrokerPSP == $right.ID_INTERMEDIARIO_PSP\n| sort by REQUEST_TIMESTAMP asc, idBrokerPSP\n| extend REQUEST_TIMESTAMP = datetime_local_to_utc(REQUEST_TIMESTAMP,\"Europe/Rome\")\n| project REQUEST_TIMESTAMP, INTERMEDIARIO_DESCR, diff_time\n\n",
            "querySource": "raw",
            "queryType": "KQL",
            "rawMode": true,
            "refId": "A",
            "resultFormat": "time_series"
          }
        ],
        "title": "pspNotifyPaymentV1/V2 - Tempi globali dei PSP",
        "transformations": [
          {
            "id": "labelsToFields",
            "options": {
              "mode": "columns",
              "valueLabel": "INTERMEDIARIO_DESCR"
            }
          }
        ],
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "2mZ1xay4z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 24,
          "x": 0,
          "y": 12
        },
        "id": 6,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true
        },
        "pluginVersion": "11.6.3",
        "targets": [
          {
            "database": "re",
            "datasource": {
              "type": "grafana-azure-data-explorer-datasource",
              "uid": "2mZ1xay4z"
            },
            "expression": {
              "from": {
                "property": {
                  "name": "ReEvent",
                  "type": "string"
                },
                "type": "property"
              },
              "groupBy": {
                "expressions": [],
                "type": "and"
              },
              "reduce": {
                "expressions": [],
                "type": "and"
              },
              "where": {
                "expressions": [],
                "type": "and"
              }
            },
            "pluginVersion": "4.4.0",
            "query": "let start=datetime_utc_to_local(todatetime(unixtime_milliseconds_todatetime($__from)), \"Europe/Rome\");\nlet end=datetime_utc_to_local(todatetime(unixtime_milliseconds_todatetime($__to)), \"Europe/Rome\");\nlet pspNotifyPayment_Req = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\", \"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , payload_xml)\n| extend channel = extract(\"<idChannel>(.*)</idChannel>\", 1 , payload_xml)\n| where idBrokerPSP in ($IntPSP)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, idBrokerPSP, psp, channel, sessionId, tipoEvento;\nlet pspNotifyPayment_Resp = ReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento in (\"pspNotifyPayment\", \"pspNotifyPaymentV2\")\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"RESP\"\n| extend payload_xml = base64_decode_tostring(payload)\n| extend outcome = extract(\"<outcome>(.*)</outcome>\", 1 , payload_xml)\n| project-away payload\n| project dataOraEvento, idDominio, iuv, ccp, sessionId, outcome, tipoEvento;\npspNotifyPayment_Req\n| join kind=leftouter pspNotifyPayment_Resp on idDominio, iuv, ccp, sessionId, tipoEvento\n| project-rename REQUEST_TIMESTAMP=dataOraEvento, RESPONSE_TIMESTAMP=dataOraEvento1\n| extend diff_time=datetime_diff(\"millisecond\", RESPONSE_TIMESTAMP, REQUEST_TIMESTAMP)\n| project-rename TEMPO_IMPIEGATO=diff_time\n| extend REQUEST_TIMESTAMP = datetime_local_to_utc(REQUEST_TIMESTAMP,\"Europe/Rome\")\n| project REQUEST_TIMESTAMP, RESPONSE_TIMESTAMP, TEMPO_IMPIEGATO, idDominio, iuv, ccp, idBrokerPSP, channel, psp, outcome, sessionId, tipoEvento\n| sort by REQUEST_TIMESTAMP asc\n\n\n",
            "querySource": "raw",
            "queryType": "KQL",
            "rawMode": true,
            "refId": "A",
            "resultFormat": "table"
          }
        ],
        "title": "Dettaglio eventi",
        "type": "table"
      }
    ],
    "preload": false,
    "refresh": "",
    "schemaVersion": 41,
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "text": "All",
            "value": "$__all"
          },
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "2mZ1xay4z"
          },
          "definition": "let start=todatetime(unixtime_milliseconds_todatetime($__from));\nlet end=todatetime(unixtime_milliseconds_todatetime($__to));\nReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento == \"pspNotifyPaymentV2\"\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , base64_decode_tostring(payload))\n| project idBrokerPSP\n| join kind=inner INTERMEDIARI_PSP on $left.idBrokerPSP == $right.ID_INTERMEDIARIO_PSP\n| extend v = strcat(idBrokerPSP, \"|\", INTERMEDIARIO_DESCR)\n| sort by INTERMEDIARIO_DESCR asc \n| project v\n",
          "includeAll": true,
          "label": "Intermediario PSP",
          "name": "IntPSP",
          "options": [],
          "query": {
            "database": "re",
            "expression": {
              "from": {
                "property": {
                  "name": "ReEvent",
                  "type": "string"
                },
                "type": "property"
              },
              "groupBy": {
                "expressions": [],
                "type": "and"
              },
              "reduce": {
                "expressions": [],
                "type": "and"
              },
              "where": {
                "expressions": [],
                "type": "and"
              }
            },
            "pluginVersion": "4.4.0",
            "query": "let start=todatetime(unixtime_milliseconds_todatetime($__from));\nlet end=todatetime(unixtime_milliseconds_todatetime($__to));\nReEvent\n| where insertedTimestamp between (start .. end)\n| where tipoEvento == \"pspNotifyPaymentV2\"\n| where categoriaEvento == \"INTERFACCIA\"\n| where sottoTipoEvento == \"REQ\"\n| extend idBrokerPSP = extract(\"<idBrokerPSP>(.*)</idBrokerPSP>\", 1 , base64_decode_tostring(payload))\n| project idBrokerPSP\n| join kind=inner INTERMEDIARI_PSP on $left.idBrokerPSP == $right.ID_INTERMEDIARIO_PSP\n| extend v = strcat(idBrokerPSP, \"|\", INTERMEDIARIO_DESCR)\n| sort by INTERMEDIARIO_DESCR asc \n| project v\n",
            "querySource": "raw",
            "queryType": "KQL",
            "rawMode": true,
            "resultFormat": "table"
          },
          "refresh": 1,
          "regex": "/(?<value>.*)\\|(?<text>.*)/",
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "now-30m",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "[GLOBAL] - Tempi pspNotifyPayment",
    "uid": "qvnjs6IVz",
    "version": 11
}