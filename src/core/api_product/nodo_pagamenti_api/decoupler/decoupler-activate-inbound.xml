<!--
    IMPORTANT:
    - Policy fragment are included as-is whenever they are referenced.
    - If using variables. Ensure they are setup before use.
    - Copy and paste your code here or simply start coding
-->
<fragment>
    <set-variable name="disable_ndp_activate" value="{{ndp-disable-activate}}" />
    <choose>
        <when condition="@{
            var soapAction = (string)context.Variables["soapAction"];
            bool disable_activate = context.Variables.GetValueOrDefault<string>("disable_ndp_activate", "false").Equals("true");
            return soapAction.Equals("activatePaymentNotice") && disable_activate;
        }">
            <return-response>
                <set-status code="200" reason="OK" />
                <set-header name="Content-Type" exists-action="override">
                    <value>text/xml</value>
                </set-header>
                <set-body><![CDATA[
                    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:common="http://pagopa-api.pagopa.gov.it/xsd/common-types/v1.0.0/" xmlns:nfp="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
                        <soapenv:Body>
                            <nfp:activatePaymentNoticeRes>
                                <outcome>KO</outcome>
                                <fault>
                                    <faultCode>PPT_SYSTEM_ERROR</faultCode>
                                    <faultString>Maintenance</faultString>
                                    <id>NodoDeiPagamentiSPC</id>
                                    <description>System under maintenance.</description>
                                </fault>
                            </nfp:activatePaymentNoticeRes>
                        </soapenv:Body>
                    </soapenv:Envelope>
                ]]></set-body>
            </return-response>
        </when>
        <when condition="@{
            var soapAction = (string)context.Variables["soapAction"];
            bool disable_activate = context.Variables.GetValueOrDefault<string>("disable_ndp_activate", "false").Equals("true");
            return soapAction.Equals("activatePaymentNoticeV2") && disable_activate;
        }">
            <return-response>
                <set-status code="200" reason="OK" />
                <set-header name="Content-Type" exists-action="override">
                    <value>text/xml</value>
                </set-header>
                <set-body><![CDATA[
                    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:common="http://pagopa-api.pagopa.gov.it/xsd/common-types/v1.0.0/" xmlns:nfp="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
                        <soapenv:Body>
                            <nfp:activatePaymentNoticeV2Response>
                                <outcome>KO</outcome>
                                <fault>
                                    <faultCode>PPT_SYSTEM_ERROR</faultCode>
                                    <faultString>Maintenance</faultString>
                                    <id>NodoDeiPagamentiSPC</id>
                                    <description>System under maintenance.</description>
                                </fault>
                            </nfp:activatePaymentNoticeV2Response>
                        </soapenv:Body>
                    </soapenv:Envelope>
                ]]></set-body>
            </return-response>
        </when>
        <when condition="@{
            var soapAction = (string)context.Variables["soapAction"];
            bool disable_activate = context.Variables.GetValueOrDefault<string>("disable_ndp_activate", "false").Equals("true");
            return soapAction.Equals("activateIOPayment") && disable_activate;
        }">
            <return-response>
                <set-status code="200" reason="OK" />
                <set-header name="Content-Type" exists-action="override">
                    <value>text/xml</value>
                </set-header>
                <set-body><![CDATA[
                    <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:common="http://pagopa-api.pagopa.gov.it/xsd/common-types/v1.0.0/" xmlns:nfp="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
                        <soapenv:Body>
                            <nfp:activateIOPaymentRes>
                                <outcome>KO</outcome>
                                <fault>
                                    <faultCode>PPT_SYSTEM_ERROR</faultCode>
                                    <faultString>Maintenance</faultString>
                                    <id>NodoDeiPagamentiSPC</id>
                                    <description>System under maintenance.</description>
                                </fault>
                            </nfp:activateIOPaymentRes>
                        </soapenv:Body>
                    </soapenv:Envelope>
                ]]></set-body>
            </return-response>
        </when>
    </choose>

	<choose>
		<when condition="@(context.Variables.GetValueOrDefault<string>("enable_wisp_dismantling_switch", "").Equals("true"))">
			<!-- check if fiscalcode and notice number belongs to wisp dismantling -->
			<set-variable name="wisp_fiscalcode_noticenumber" value="@{
                // requestData should be set in decoupler-algorithm fragment (executed in product policy)
                try {
                var requestData = JObject.Parse((string)context.Variables["requestData"]);
                var noticeNumber = requestData.ContainsKey("noticeNumber") ? (string) requestData["noticeNumber"] : "";
    var ci = requestData.ContainsKey("ci") ? (string) requestData["ci"] : "";
    return "wisp_" + ci + "_" + noticeNumber;
    } catch (Exception e) {
    return "wisp_requestData_not_set";
    }
    }" />
			<cache-lookup-value key="@((string) context.Variables["wisp_fiscalcode_noticenumber"])" variable-name="belongs_to_wisp" default-value="NONE" caching-type="external" />
			<choose>
				<when condition="@(!context.Variables.GetValueOrDefault<string>("belongs_to_wisp", "NONE").Equals("NONE"))">
					<set-variable name="wisp_ecommerce_channels" value="{{wisp-ecommerce-channels}}" />
					<choose>
						<when condition="@{
                            string[] activatePayment = new string[] {"activatePaymentNoticeV2"};
                            string[] ecommerceChannels = ((string)context.Variables["wisp_ecommerce_channels"] ?? "").Split(',');

        try {
        XElement doc = context.Request.Body.As<XElement>(preserveContent: true);
        XElement body = doc.Descendants(doc.Name.Namespace + "Body").FirstOrDefault();
        XElement primitive = (XElement) body.FirstNode;
        string channelId = (string) primitive.Descendants("idChannel").FirstOrDefault();

        var soapAction = (string)context.Variables["soapAction"];
        return activatePayment.Contains(soapAction) && ecommerceChannels.Contains(channelId);
        } catch (Exception e) {
        return false;
        }
        }">
							<set-variable name="wisp_ecommerce_paymentNote" value="@{
                                // eCommerce set in paymentNote the idCart that is the WISP sessionId
                                try {
                                    XElement doc = context.Request.Body.As<XElement>(preserveContent: true);
                                    XElement body = doc.Descendants(doc.Name.Namespace + "Body").FirstOrDefault();
                                    XElement primitive = (XElement) body.FirstNode;
                                    string paymentNote = (string) primitive.Descendants("paymentNote").FirstOrDefault();
                                    return paymentNote;
                                } catch (Exception e) {
                                    return "NOTSET";
                                }
                            }" />
							<cache-lookup-value key="@("wisp_timer_hang_" + ((string)context.Variables["wisp_ecommerce_paymentNote"] ?? "") + (((string) context.Variables["wisp_fiscalcode_noticenumber"])).Substring(4))" variable-name="wisp_checkout_timeout" default-value="NONE" caching-type="external" />
							<choose>
								<when condition="@(context.Variables.GetValueOrDefault<string>("wisp_checkout_timeout", "NONE").Equals("NONE"))">
									<return-response>
										<set-status code="200" reason="OK" />
										<set-header name="Content-Type" exists-action="override">
											<value>text/xml</value>
										</set-header>
										<set-body><![CDATA[
<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:common="http://pagopa-api.pagopa.gov.it/xsd/common-types/v1.0.0/" xmlns:nfp="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
    <soapenv:Body>
        <nfp:activatePaymentNoticeV2Response>
            <outcome>KO</outcome>
            <fault>
                <faultCode>PPT_WISP_SESSIONE_SCONOSCIUTA</faultCode>
                <faultString>User session expired.</faultString>
                <id>NodoDeiPagamentiSPC</id>
                <description>Too many times occurred between Checkout redirect and activatePaymentNoticeV2</description>
            </fault>
        </nfp:activatePaymentNoticeV2Response>
    </soapenv:Body>
</soapenv:Envelope>
                                        ]]></set-body>
									</return-response>
								</when>
							</choose>
						</when>
					</choose>
				</when>
			</choose>
		</when>
	</choose>
</fragment>
