<fragment>
  <!-- set ndphost header -->
  ${ndphost_variable}
  <trace source="renewrequestdebug" severity="information">@((string) context.Variables["renewrequest"])</trace>
  <choose>
    <when condition="@(context.Variables.ContainsKey("baseUrl") && context.Variables.ContainsKey("renewrequest") && context.Variables.ContainsKey("renewrequest")!= null)">
    <trace source="first-when" severity="information">execute on-error request</trace>
    <choose>
      <when condition="@(context.Variables.ContainsKey("soapAction") && context.Variables.GetValueOrDefault<string>("soapAction", "")!= "")">
      <set-variable name="contentType" value="text/xml"/>
      <!-- SOAP requests -->
      <send-request mode="new" ignore-error="true" response-variable-name="risposta">
        <set-url>@{return ((string) context.Variables["baseUrl"]+"/webservices/input"); }</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
          <value>text/xml</value>
        </set-header>
        <set-header name="ndphost" exists-action="override">
          <value>@(context.Variables.GetValueOrDefault<string>("ndphost", ""))</value>
        </set-header>
        <set-header name="SOAPAction" exists-action="override">
          <value>@(context.Variables.GetValueOrDefault<string>("soapAction", ""))</value>
        </set-header>
        <set-body>@{
          return (string) context.Variables["renewrequest"];
          }</set-body>
      </send-request>
    </when>
    <otherwise>
      <set-variable name="contentType" value="application/json"/>
      <!-- REST requests -->
      <send-request mode="new" ignore-error="true" response-variable-name="risposta">
        <set-url>@{return (string) context.Variables["baseUrl"] + "/" + (string)context.Request.Url.Path; }</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
          <value>application/json</value>
        </set-header>
        <set-header name="ndphost" exists-action="override">
          <value>@(context.Variables.GetValueOrDefault<string>("ndphost", ""))</value>
        </set-header>
        <set-body>@{
          return (string) context.Variables["renewrequest"];
          }</set-body>
      </send-request>
    </otherwise>
  </choose>
  <set-variable name="leggirisposta" value="@((string)((IResponse)context.Variables["risposta"]).Body.As<string>(preserveContent: true))" />
  <return-response>
    <set-header name="Content-Type" exists-action="override">
        <value>@((string)context.Variables["contentType"])</value>
    </set-header>
    <set-body>@{
      string message = (string)context.Variables["leggirisposta"];
      return message;
      }</set-body>
  </return-response>
</when>
<otherwise>
<trace source="on_soap_error" severity="error">
  <message>@{
    string error = "[ALERT][ON-SOAP-ERROR][REASON] A policy error has occurred, " +
    "Reason:" + context.LastError.Reason;
    return error;
    }</message>
</trace>
<trace source="on_soap_error" severity="error">
  <message>@{
    string error = "[ALERT][ON-SOAP-ERROR][STACK-TRACE] A policy error has occurred, " +
    "Source: " + context.LastError.Source + ", " +
    "Reason: " + context.LastError.Reason + ", " +
    "Message: " + context.LastError.Message + ", " +
    "Scope: " + context.LastError.Scope + ", " +
    "Section: " + context.LastError.Section + ", " +
    "Path: " + context.LastError.Path + ", " +
    "PolicyId: " + context.LastError.PolicyId;
    return error;
    }</message>
  <!-- soapAction is required!  -->
  <metadata name="Operation Name" value="@((context.Variables.ContainsKey("soapAction") ? (string)context.Variables["soapAction"] : "Unknown"))" />
</trace>
</otherwise>
  </choose>
  </fragment>
