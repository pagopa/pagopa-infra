pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - prf
      - uat
      - prd
  # version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
  # liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://fdr-db.d.internal.postgresql.pagopa.it:5432/fdr3?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-fdr-kv
    poolImage: 'pagopa-dev-linux-infra'
  ${{ if eq(parameters.k8sEnv, 'it') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://fdr-db.d.internal.postgresql.pagopa.it:5432/fdr3-replica?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-fdr-kv
    poolImage: 'pagopa-dev-linux-infra'
  ${{ elseif eq(parameters.k8sEnv, 'prf') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://fdr-db.u.internal.postgresql.pagopa.it:6432/fdr3-replica?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-fdr-kv
    poolImage: 'pagopa-uat-linux-infra'
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://fdr-db.u.internal.postgresql.pagopa.it:6432/fdr3?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-fdr-kv
    poolImage: 'pagopa-uat-linux-infra'
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_PROD)'
    JDBC_URL: jdbc:postgresql://fdr-db.p.internal.postgresql.pagopa.it:6432/fdr3?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-p-fdr-kv
    poolImage: 'pagopa-prod-linux-infra'
  APPROVE_NOTIFY_GROUP: '[pagoPA-iac]\pagopa-iac-externals-team'
  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  FDR3_USERNAME: fdr3
  FDR3_SCHEMA: fdr3

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        pool: $(poolImage)
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-fdr3-password'
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(FDR3_USERNAME)" \
              --password="$(db-fdr3-password)" \
              --classpath=src/psql/fdr/liquibase/changelog/fdr3 \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(FDR3_SCHEMA)" \
              --defaultSchemaName="$(FDR3_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(FDR3_SCHEMA)
            displayName: "fdr3 db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(FDR3_USERNAME)" \
              --password="$(db-fdr3-password)" \
              --classpath=src/psql/fdr/liquibase/changelog/fdr3 \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(FDR3_SCHEMA)" \
              --defaultSchemaName="$(FDR3_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(FDR3_SCHEMA)
            displayName: "fdr3 db validate"
      - job: prd_approval
        dependsOn: liquibase_status_job
        condition: eq('${{ parameters.k8sEnv }}', 'prd')
        pool: server
        displayName: "Approval"
        timeoutInMinutes: 16
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please check liquibase status and validation for each database and resume if correct"
              onTimeout: 'reject'
      - job: initialization
        pool: $(poolImage)
        dependsOn: [liquibase_status_job,prd_approval]
        condition: or(and(eq('${{ parameters.k8sEnv }}', 'dev'),eq('${{ parameters.k8sEnv }}', 'it'),eq('${{ parameters.k8sEnv }}', 'prf'),eq('${{ parameters.k8sEnv }}', 'uat'), not(failed('liquibase_status_job'))),and(eq('${{ parameters.k8sEnv }}', 'prd'),not(failed('prd_approval'))))
        displayName: "Update fdr DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-fdr3-password'
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(FDR3_USERNAME)" \
              --password="$(db-fdr3-password)" \
              --classpath=src/psql/fdr/liquibase/changelog/fdr3 \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(FDR3_SCHEMA)" \
              --defaultSchemaName="$(FDR3_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(FDR3_SCHEMA)
            displayName: "Run Liquibase fdr3"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(FDR3_USERNAME)" \
              --password="$(db-fdr3-password)" \
              --classpath=src/psql/fdr/liquibase/changelog/fdr3 \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(FDR3_SCHEMA)" \
              --defaultSchemaName="$(FDR3_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag fdr3"
