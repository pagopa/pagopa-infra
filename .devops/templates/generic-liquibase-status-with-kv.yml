parameters:
  - name: DATABASE_NAME
    displayName: 'Database name'
    type: string
  - name: LIQUIBASE_FOLDER
    displayName: 'Liquibase folder'
    type: string
  - name: LIQUIBASE_DB_VERSION
    displayName: 'Liquibase version'
    type: string
  - name: JDBC_URL
    displayName: 'JDBC URL'
    type: string
  - name: USERNAME
    displayName: 'Username'
    type: string
  - name: PASSWORD_KV_KEY
    displayName: 'Key Vault password key'
    type: string
  - name: KV_NAME
    displayName: 'Key Vault name'
    type: string
  - name: SCHEMA
    displayName: 'Schema'
    type: string
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  - name: AZURE_SERVICE_CONNECTION
    displayName: "Azure service connection name"
    type: string
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE
  - name: LIQUIBASE_SCHEMA_NAME
    displayName: Liquibase Schema Name
    type: string
    default: "-"
  - name: CHANGELOG_LOCK_TABLE
    displayName: Changelog Lock Table Name
    type: string
    default: "-"
  - name: CHANGELOG_TABLE
    displayName: Changelog Table Name
    type: string
    default: "-"



steps:
  - task: AzureKeyVault@2
    displayName: "Get ${{parameters.KV_NAME}} secrets"
    inputs:
      azureSubscription: ${{ parameters.AZURE_SERVICE_CONNECTION }}
      keyVaultName: ${{parameters.KV_NAME}}
      secretsFilter: ${{parameters.PASSWORD_KV_KEY}}
  - script: |
      if [ ! -f src/psql/${{ parameters.LIQUIBASE_FOLDER }}/${{ parameters.DATABASE_NAME }}/${{ parameters.SCHEMA }}/db.changelog-master-${{ parameters.LIQUIBASE_DB_VERSION }}.xml ]; then
        echo "Version ${{ parameters.LIQUIBASE_DB_VERSION }} not defined for ${{ parameters.DATABASE_NAME }}"
        echo "File db.changelog-master-${{ parameters.LIQUIBASE_DB_VERSION }}.xml not found in folder ${{ parameters.LIQUIBASE_FOLDER }}/${{ parameters.DATABASE_NAME }}!"
        echo "##vso[task.setvariable variable=file_present]false"
      else
        echo "File db.changelog-master-${{ parameters.LIQUIBASE_DB_VERSION }}.xml found in folder ${{ parameters.LIQUIBASE_FOLDER }}/${{ parameters.DATABASE_NAME }}!"
        echo "##vso[task.setvariable variable=file_present]true"
      fi
    displayName: "${{ parameters.DATABASE_NAME }} ${{ parameters.SCHEMA }} - Check Liquibase version exists"
  - script: |
      if [[ "${{ parameters.LIQUIBASE_SCHEMA_NAME }}" == "-" ]]; then
        echo "Liquibase schema name is not set, using default schema: ${{ parameters.SCHEMA }}"
        echo "##vso[task.setvariable variable=LIQUIBASE_SCHEMA_NAME]${{ parameters.SCHEMA }}"
      else
        echo "Using Liquibase schema name: ${{ parameters.LIQUIBASE_SCHEMA_NAME }}"
        echo "##vso[task.setvariable variable=LIQUIBASE_SCHEMA_NAME]${{ parameters.LIQUIBASE_SCHEMA_NAME }}"
      fi

      if [[ "${{ parameters.CHANGELOG_LOCK_TABLE }}" == "-" ]]; then
        echo "Liquibase changelog lock table name not set, using default name: DATABASECHANGELOGLOCK"
        echo "##vso[task.setvariable variable=CHANGELOG_LOCK_TABLE]DATABASECHANGELOGLOCK"
      else
        echo "Using Liquibase changelog lock table name: ${{ parameters.CHANGELOG_LOCK_TABLE }}"
        echo "##vso[task.setvariable variable=CHANGELOG_LOCK_TABLE]${{ parameters.CHANGELOG_LOCK_TABLE }}"
      fi

      if [[ "${{ parameters.CHANGELOG_TABLE }}" == "-" ]]; then
        echo "Liquibase changelog table name is not set, using default name: DATABASECHANGELOG"
        echo "##vso[task.setvariable variable=CHANGELOG_TABLE]DATABASECHANGELOG"
      else
        echo "Using Liquibase changelog table name: ${{ parameters.CHANGELOG_TABLE }}"
        echo "##vso[task.setvariable variable=CHANGELOG_TABLE]${{ parameters.CHANGELOG_TABLE }}"
      fi
    displayName: "${{ parameters.DATABASE_NAME }} ${{ parameters.SCHEMA }} - Set variables"
    condition: and(succeeded(), eq(variables.file_present, true))
  - script: |
      set -x
      liquibase \
      --url="${{ parameters.JDBC_URL }}" \
      --username="${{ parameters.USERNAME }}" \
      --password=$[variables.${{parameters.PASSWORD_KV_KEY}}] \
      --classpath=src/psql/${{ parameters.LIQUIBASE_FOLDER }}/${{ parameters.DATABASE_NAME }}/${{ parameters.SCHEMA }} \
      --changeLogFile=db.changelog-master-${{ parameters.LIQUIBASE_DB_VERSION }}.xml \
      --liquibaseSchemaName="$(LIQUIBASE_SCHEMA_NAME)" \
      --defaultSchemaName="${{ parameters.SCHEMA }}" \
      --contexts="${{ parameters.lbContexts }}" \
      --log-level=${{ parameters.lbLogLevel }} \
      --database-changelog-lock-table-name="$(CHANGELOG_LOCK_TABLE)"  \
      --database-changelog-table-name="$(CHANGELOG_TABLE)" \
      status -Dschema=${{ parameters.SCHEMA }}
    displayName: "${{ parameters.DATABASE_NAME }} - db status"
    condition: and(succeeded(), eq(variables.file_present, true))
  - script: |
      liquibase \
      --url="${{ parameters.JDBC_URL }}" \
      --username="${{ parameters.USERNAME }}" \
      --password=$[variables.${{parameters.PASSWORD_KV_KEY}}] \
      --classpath=src/psql/${{ parameters.LIQUIBASE_FOLDER }}/${{ parameters.DATABASE_NAME }}/${{ parameters.SCHEMA }} \
      --changeLogFile=db.changelog-master-${{ parameters.LIQUIBASE_DB_VERSION }}.xml \
      --liquibaseSchemaName="$(LIQUIBASE_SCHEMA_NAME)" \
      --defaultSchemaName="${{ parameters.SCHEMA }}" \
      --contexts="${{ parameters.lbContexts }}" \
      --log-level=${{ parameters.lbLogLevel }} \
      --database-changelog-lock-table-name="$(CHANGELOG_LOCK_TABLE)"  \
      --database-changelog-table-name="$(CHANGELOG_TABLE)" \
      validate -Dschema=${{ parameters.SCHEMA }}
    displayName: "${{ parameters.DATABASE_NAME }} ${{ parameters.SCHEMA }} - db validate"
    condition: and(succeeded(), eq(variables.file_present, true))
