pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - dev-storico
      - it
      - prf
      - uat
      - uat-storico
      - prd
      - prd-storico
  # version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
  # liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
    poolImage: 'pagopa-dev-linux-infra'
    liquibase_folder: 'changelog'
  ${{ if eq(parameters.k8sEnv, 'dev-storico') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
    poolImage: 'pagopa-dev-linux-infra'
    liquibase_folder: 'changelog_storico'
  ${{ if eq(parameters.k8sEnv, 'it') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo-replica?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
    poolImage: 'pagopa-dev-linux-infra'
    liquibase_folder: 'changelog'
  ${{ elseif eq(parameters.k8sEnv, 'prf') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo-replica?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-nodo-kv
    poolImage: 'pagopa-uat-linux-infra'
    liquibase_folder: 'changelog'
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-nodo-kv
    poolImage: 'pagopa-uat-linux-infra'
    liquibase_folder: 'changelog'
  ${{ elseif eq(parameters.k8sEnv, 'uat-storico') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-u-nodo-kv
    poolImage: 'pagopa-uat-linux-infra'
    liquibase_folder: 'changelog_storico'
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_PROD)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-p-nodo-kv
    poolImage: 'pagopa-prod-linux-infra'
    liquibase_folder: 'changelog'
  ${{ elseif eq(parameters.k8sEnv, 'prd-storico') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_PROD)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:6432/nodo?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-p-nodo-kv
    poolImage: 'pagopa-prod-linux-infra'
    liquibase_folder: 'changelog_storico'
  APPROVE_NOTIFY_GROUP: '[pagoPA-iac]\pagopa-iac-externals-team'
  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  CFG_USERNAME: cfg
  CFG_SCHEMA: cfg
  OFFLINE_USERNAME: offline
  OFFLINE_SCHEMA: offline
  ONLINE_USERNAME: online
  ONLINE_SCHEMA: online
  RE_USERNAME: re
  RE_SCHEMA: re
  WFESP_USERNAME: wfesp
  WFESP_SCHEMA: wfesp
  PARTITION_USERNAME: partition
  PARTITION_SCHEMA: partition

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        pool: $(poolImage)
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-wfesp-password,db-partition-password'
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(CFG_SCHEMA)
            displayName: "cfg db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
            displayName: "online db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
            displayName: "offline db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(RE_SCHEMA)
            displayName: "re db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(WFESP_SCHEMA)
            displayName: "wfeps db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(PARTITION_USERNAME)" \
              --password="$(db-partition-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
              --defaultSchemaName="$(PARTITION_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              status -Dschema=$(PARTITION_SCHEMA)
            displayName: "partition db status"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(CFG_SCHEMA)
            displayName: "cfg db validate"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
            displayName: "online db validate"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
            displayName: "offline db validate"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(RE_SCHEMA)
            displayName: "re db validate"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(WFESP_SCHEMA)
            displayName: "wfeps db validate"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(PARTITION_USERNAME)" \
              --password="$(db-partition-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
              --defaultSchemaName="$(PARTITION_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              validate -Dschema=$(PARTITION_SCHEMA)
            displayName: "partition db validate"
      - job: approval
        dependsOn: liquibase_status_job
        condition: eq('${{ parameters.k8sEnv }}', 'prd')
        pool: server
        displayName: "Approval"
        timeoutInMinutes: 16
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please check liquibase status and validation for each database and resume if correct"
              onTimeout: 'reject'
      - job: initialization
        pool: $(poolImage)
        dependsOn: [liquibase_status_job,approval]
        condition: and(not(failed('liquibase_status_job')), not(failed('approval')))
        displayName: "Update nodo DB ${{ parameters.k8sEnv }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-wfesp-password,db-partition-password'
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(CFG_SCHEMA)
            displayName: "Run Liquibase cfg"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(CFG_USERNAME)" \
              --password="$(db-cfg-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(CFG_SCHEMA)" \
              --defaultSchemaName="$(CFG_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag cfg"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
            displayName: "Run Liquibase online"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(ONLINE_USERNAME)" \
              --password="$(db-online-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
              --defaultSchemaName="$(ONLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag online"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
            displayName: "Run Liquibase offline"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(OFFLINE_USERNAME)" \
              --password="$(db-offline-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
              --defaultSchemaName="$(OFFLINE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag offline"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(RE_SCHEMA)
            displayName: "Run Liquibase re"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(RE_USERNAME)" \
              --password="$(db-re-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(RE_SCHEMA)" \
              --defaultSchemaName="$(RE_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag re"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(WFESP_SCHEMA)
            displayName: "Run Liquibase wfesp"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(WFESP_USERNAME)" \
              --password="$(db-wfesp-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/wfesp \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(WFESP_SCHEMA)" \
              --defaultSchemaName="$(WFESP_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag wfesp"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(PARTITION_USERNAME)" \
              --password="$(db-partition-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
              --defaultSchemaName="$(PARTITION_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              update -Dschema=$(PARTITION_SCHEMA)
            displayName: "Run Liquibase partition"
          - script: |
              liquibase \
              --url="$(JDBC_URL)" \
              --username="$(PARTITION_USERNAME)" \
              --password="$(db-partition-password)" \
              --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
              --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
              --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
              --defaultSchemaName="$(PARTITION_SCHEMA)" \
              --contexts="${{ parameters.lbContexts }}" \
              --log-level=${{ parameters.lbLogLevel }} \
              tag ${{ parameters.dbVersion }}
            displayName: "Tag partition"
