pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: env
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd
  # version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
    default: '3.35.0'
  # version of liquibase db.changelog-master-*.xml to run
  - name: dbVersionSt
    displayName: Database Version Storico patch
    type: string
    default: '1.0.0'
  # liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.env, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    JDBC_URL_STORICO: jdbc:postgresql://pagopa-d-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL: jdbc:postgresql://pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL_STORICO: jdbc:postgresql://pagopa-d-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-d-nodo-kv
    poolImage: 'pagopa-dev-linux-infra'
    NODO_DB_HOST: pagopa-d-weu-nodo-flexible-postgresql.postgres.database.azure.com
    NODO_DB_PORT: 6432
  ${{ elseif eq(parameters.env, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    JDBC_URL_STORICO: jdbc:postgresql://pagopa-u-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL: jdbc:postgresql://pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL_STORICO: jdbc:postgresql://pagopa-u-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    NODO_DB_HOST: pagopa-u-weu-nodo-flexible-postgresql.postgres.database.azure.com
    NODO_DB_PORT: 6432
    KEY_VAULT_NAME: pagopa-u-nodo-kv
    poolImage: 'pagopa-uat-linux-infra'
  ${{ elseif eq(parameters.env, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_PROD)'
    JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    JDBC_URL__STORICO: jdbc:postgresql://pagopa-p-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL: jdbc:postgresql://pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    POSTGRES_JDBC_URL_STORICO: jdbc:postgresql://pagopa-p-weu-nodo-storico-flexible-postgresql.postgres.database.azure.com:5432/postgres?sslmode=require&prepareThreshold=0
    KEY_VAULT_NAME: pagopa-p-nodo-kv
    NODO_DB_HOST: pagopa-p-weu-nodo-flexible-postgresql.postgres.database.azure.com
    NODO_DB_PORT: 6432
    poolImage: 'pagopa-prod-linux-infra'
  APPROVE_NOTIFY_GROUP: '[pagoPA-iac]\pagopa-iac-externals-team'
  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  CFG_USERNAME: cfg
  CFG_SCHEMA: cfg
  OFFLINE_USERNAME: offline
  OFFLINE_SCHEMA: offline
  ONLINE_USERNAME: online
  ONLINE_SCHEMA: online
  RE_USERNAME: re
  RE_SCHEMA: re
  PARTITION_USERNAME: partition
  PARTITION_SCHEMA: partition
  ADMIN_USERNAME: azureuser
  ADMIN_SCHEMA: public
  liquibase_folder: 'changelog'
  liquibase_folder_st_nodo: 'changelog_st_nodo'
  liquibase_folder_st_nodo_storico: 'changelog_st_nodo_storico'

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        pool: $(poolImage)
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-partition-password,db-administrator-login-password'
      # cfg status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: cfg
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(CFG_USERNAME)
          PASSWORD: $(db-cfg-password)
          SCHEMA: $(CFG_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: cfg
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(CFG_USERNAME)
          PASSWORD: $(db-cfg-password)
          SCHEMA: $(CFG_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      # online status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: online
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(ONLINE_USERNAME)
          PASSWORD: $(db-online-password)
          SCHEMA: $(ONLINE_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          OFFLINE_SCHEMA: $(OFFLINE_SCHEMA)
          OFFLINE_USERNAME: $(OFFLINE_USERNAME)
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: online
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(ONLINE_USERNAME)
          PASSWORD: $(db-online-password)
          SCHEMA: $(ONLINE_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          OFFLINE_SCHEMA: $(OFFLINE_SCHEMA)
          OFFLINE_USERNAME: $(OFFLINE_USERNAME)
      # offline status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: offline
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(OFFLINE_USERNAME)
          PASSWORD: $(db-offline-password)
          SCHEMA: $(OFFLINE_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          ONLINE_SCHEMA: $(ONLINE_SCHEMA)
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: offline
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(OFFLINE_USERNAME)
          PASSWORD: $(db-offline-password)
          SCHEMA: $(OFFLINE_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          ONLINE_SCHEMA: $(ONLINE_SCHEMA)
      # RE status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: re
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(RE_USERNAME)
          PASSWORD: $(db-re-password)
          SCHEMA: $(RE_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: re
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(RE_USERNAME)
          PASSWORD: $(db-re-password)
          SCHEMA: $(RE_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      # partition status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: partition
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(PARTITION_USERNAME)
          PASSWORD: $(db-partition-password)
          SCHEMA: $(PARTITION_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: partition
          LIQUIBASE_FOLDER: $(liquibase_folder)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(PARTITION_USERNAME)
          PASSWORD: $(db-partition-password)
          SCHEMA: $(PARTITION_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      # partition st_nodo status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: partition
          LIQUIBASE_FOLDER: $(liquibase_folder_st_nodo)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersionSt }}
          JDBC_URL: $(JDBC_URL)
          USERNAME: $(PARTITION_USERNAME)
          PASSWORD: $(db-partition-password)
          SCHEMA: $(PARTITION_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: partition
          LIQUIBASE_FOLDER: $(liquibase_folder_st_nodo_storico)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersionSt }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(PARTITION_USERNAME)
          PASSWORD: $(db-partition-password)
          SCHEMA: $(PARTITION_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
      # admin st_nodo_storico status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: admin
          LIQUIBASE_FOLDER: $(liquibase_folder_st_nodo_storico)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersionSt }}
          JDBC_URL: $(JDBC_URL_STORICO)
          USERNAME: $(ADMIN_USERNAME)
          PASSWORD: $(db-administrator-login-password)
          SCHEMA: $(ADMIN_SCHEMA)
          TARGET_DB_TYPE: storico
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          LIQUIBASE_SCHEMA_NAME: public
          CHANGELOG_LOCK_TABLE: DATABASECHANGELOGLOCK_ADMIN
          CHANGELOG_TABLE: DATABASECHANGELOG_ADMIN
          NODO_DB_HOST: $(NODO_DB_HOST)
          NODO_DB_PORT: $(NODO_DB_PORT)
          DB_PARTITION_PASSWORD: $(db-partition-password)
          DB_ADMIN_PASSWORD: $(db-administrator-login-password)
      # admin st_nodo_storico status
      - template: ./templates/liquibase-status.yml
        parameters:
          DATABASE_NAME: admin-postgres
          LIQUIBASE_FOLDER: $(liquibase_folder_st_nodo)
          LIQUIBASE_DB_VERSION: ${{ parameters.dbVersionSt }}
          JDBC_URL: $(POSTGRES_JDBC_URL)
          USERNAME: $(ADMIN_USERNAME)
          PASSWORD: $(db-administrator-login-password)
          SCHEMA: $(ADMIN_SCHEMA)
          TARGET_DB_TYPE: main
          lbContexts: ${{ parameters.lbContexts }}
          lbLogLevel: ${{ parameters.lbLogLevel }}
          LIQUIBASE_SCHEMA_NAME: public
          CHANGELOG_LOCK_TABLE: DATABASECHANGELOGLOCK_CRON
          CHANGELOG_TABLE: DATABASECHANGELOG_CRON
      - job: approval
        dependsOn: liquibase_status_job
        condition: eq('${{ parameters.env }}', 'prd')
        pool: server
        displayName: "Approval"
        timeoutInMinutes: 16
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 15
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please check liquibase status and validation for each database and resume if correct"
              onTimeout: 'reject'
      - job: initialization
        pool: $(poolImage)
        dependsOn: [liquibase_status_job,approval]
        condition: and(not(failed('liquibase_status_job')), not(failed('approval')))
        displayName: "Update nodo DB ${{ parameters.env }}"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - task: AzureKeyVault@2
            displayName: "Get $(KEY_VAULT_NAME) secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-cfg-password,db-online-password,db-offline-password,db-re-password,db-partition-password,db-administrator-login-password'
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/cfg/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on cfg!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(CFG_USERNAME)" \
                --password="$(db-cfg-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(CFG_SCHEMA)" \
                --defaultSchemaName="$(CFG_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(CFG_SCHEMA)
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(CFG_USERNAME)" \
                --password="$(db-cfg-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(CFG_SCHEMA)" \
                --defaultSchemaName="$(CFG_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(CFG_SCHEMA)
              fi
            displayName: "Run Liquibase cfg"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/cfg/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on cfg!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(CFG_USERNAME)" \
                --password="$(db-cfg-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(CFG_SCHEMA)" \
                --defaultSchemaName="$(CFG_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(CFG_USERNAME)" \
                --password="$(db-cfg-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/cfg \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(CFG_SCHEMA)" \
                --defaultSchemaName="$(CFG_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag cfg"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/online/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on online!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(ONLINE_USERNAME)" \
                --password="$(db-online-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
                --defaultSchemaName="$(ONLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(ONLINE_USERNAME)" \
                --password="$(db-online-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
                --defaultSchemaName="$(ONLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(ONLINE_SCHEMA) -DschemaOffline=$(OFFLINE_SCHEMA) -DusernameOffline=$(OFFLINE_USERNAME)
              fi
            displayName: "Run Liquibase online"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/online/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on online!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(ONLINE_USERNAME)" \
                --password="$(db-online-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
                --defaultSchemaName="$(ONLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(ONLINE_USERNAME)" \
                --password="$(db-online-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/online \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(ONLINE_SCHEMA)" \
                --defaultSchemaName="$(ONLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag online"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/offline/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on offline!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(OFFLINE_USERNAME)" \
                --password="$(db-offline-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
                --defaultSchemaName="$(OFFLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(OFFLINE_USERNAME)" \
                --password="$(db-offline-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
                --defaultSchemaName="$(OFFLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(OFFLINE_SCHEMA) -DschemaOnline=$(ONLINE_SCHEMA)
              fi
            displayName: "Run Liquibase offline"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/offline/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on offline!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(OFFLINE_USERNAME)" \
                --password="$(db-offline-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
                --defaultSchemaName="$(OFFLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(OFFLINE_USERNAME)" \
                --password="$(db-offline-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/offline \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(OFFLINE_SCHEMA)" \
                --defaultSchemaName="$(OFFLINE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag offline"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/re/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on re!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(RE_USERNAME)" \
                --password="$(db-re-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(RE_SCHEMA)" \
                --defaultSchemaName="$(RE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(RE_SCHEMA)
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(RE_USERNAME)" \
                --password="$(db-re-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(RE_SCHEMA)" \
                --defaultSchemaName="$(RE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(RE_SCHEMA)
              fi
            displayName: "Run Liquibase re"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/re/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on re!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(RE_USERNAME)" \
                --password="$(db-re-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(RE_SCHEMA)" \
                --defaultSchemaName="$(RE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(RE_USERNAME)" \
                --password="$(db-re-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/re \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(RE_SCHEMA)" \
                --defaultSchemaName="$(RE_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag re"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/partition/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on partition!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(PARTITION_SCHEMA)
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(PARTITION_SCHEMA)
              fi

              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/partition/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on partition st_nodo!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(PARTITION_SCHEMA)
              fi
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/partition/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on partition st_nodo_storico!"
              else
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(PARTITION_SCHEMA)
              fi
            displayName: "Run Liquibase partition"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder)/partition/db.changelog-master-${{ parameters.dbVersion }}.xml ]; then
                echo "Version ${{ parameters.dbVersion }} not defined on partition!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersion }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/partition/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on partition st_nodo!"
              else
                liquibase \
                --url="$(JDBC_URL)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/partition/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on partition st_nodo_storico!"
              else
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(PARTITION_USERNAME)" \
                --password="$(db-partition-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/partition \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="$(PARTITION_SCHEMA)" \
                --defaultSchemaName="$(PARTITION_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag partition"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/admin/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on admin st_nodo_storico!"
              else
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(ADMIN_USERNAME)" \
                --password="$(db-administrator-login-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/admin \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="public" \
                --database-changelog-lock-table-name="DATABASECHANGELOGLOCK_ADMIN" \
                --database-changelog-table-name="DATABASECHANGELOG_ADMIN" \
                --defaultSchemaName="$(ADMIN_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(ADMIN_SCHEMA) -Dnodo-db-host=$(NODO_DB_HOST) -Dnodo-db-port=$(NODO_DB_PORT) -Dpartition-password=$(db-partition-password) -Dadmin-password=$(db-administrator-login-password)
              fi
            displayName: "Run Liquibase st admin nodo storico"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/admin/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on admin st_nodo_storico!"
              else
                liquibase \
                --url="$(JDBC_URL_STORICO)" \
                --username="$(ADMIN_USERNAME)" \
                --password="$(db-administrator-login-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo_storico)/admin \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --defaultSchemaName="$(ADMIN_SCHEMA)" \
                --liquibaseSchemaName="public" \
                --database-changelog-lock-table-name="DATABASECHANGELOGLOCK_ADMIN" \
                --database-changelog-table-name="DATABASECHANGELOG_ADMIN" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag admin st nodo storico"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/admin-postgres/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on admin st_nodo!"
              else
                liquibase \
                --url="$(POSTGRES_JDBC_URL)" \
                --username="$(ADMIN_USERNAME)" \
                --password="$(db-administrator-login-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/admin-postgres \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="public" \
                --database-changelog-lock-table-name="DATABASECHANGELOGLOCK_CRON" \
                --database-changelog-table-name="DATABASECHANGELOG_CRON" \
                --defaultSchemaName="$(ADMIN_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                update -Dschema=$(ADMIN_SCHEMA)
              fi
            displayName: "Run Liquibase admin st nodo postgres"
          - script: |
              if [ ! -f src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/admin-postgres/db.changelog-master-${{ parameters.dbVersionSt }}.xml ]; then
                echo "Version ${{ parameters.dbVersionSt }} not defined on admin st_nodo!"
              else
                liquibase \
                --url="$(POSTGRES_JDBC_URL)" \
                --username="$(ADMIN_USERNAME)" \
                --password="$(db-administrator-login-password)" \
                --classpath=src/psql/nodo/liquibase/$(liquibase_folder_st_nodo)/admin-postgres \
                --changeLogFile=db.changelog-master-${{ parameters.dbVersionSt }}.xml \
                --liquibaseSchemaName="public" \
                --database-changelog-lock-table-name="DATABASECHANGELOGLOCK_CRON" \
                --database-changelog-table-name="DATABASECHANGELOG_CRON" \
                --defaultSchemaName="$(ADMIN_SCHEMA)" \
                --contexts="${{ parameters.lbContexts }}" \
                --log-level=${{ parameters.lbLogLevel }} \
                tag ${{ parameters.dbVersion }}
              fi
            displayName: "Tag admin st nodo postgres"
