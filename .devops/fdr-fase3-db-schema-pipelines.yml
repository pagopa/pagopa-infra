pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: k8sEnv
    displayName: K8s Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - prf
      - uat
      - prd

variables:
  ${{ if eq(parameters.k8sEnv, 'dev') }}:
    DB_HOST: pagopa-d-weu-fdr-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_DEV)'
    KEY_VAULT_NAME: 'pagopa-d-fdr-kv'
    DATABASE_NAME: fdr3
    poolImage: 'pagopa-dev-linux-infra'
  ${{ elseif eq(parameters.k8sEnv, 'uat') }}:
    DB_HOST: pagopa-u-weu-fdr-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_UAT)'
    KEY_VAULT_NAME: 'pagopa-u-fdr-kv'
    DATABASE_NAME: fdr3
    poolImage: 'pagopa-uat-linux-infra'
  ${{ elseif eq(parameters.k8sEnv, 'prd') }}:
    DB_HOST: pagopa-p-weu-fdr-flexible-postgresql
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_PLAN_NAME_PROD)'
    KEY_VAULT_NAME: 'pagopa-p-fdr-kv'
    DATABASE_NAME: fdr3
    poolImage: 'pagopa-prod-linux-infra'
  ADMIN_USERNAME: azureuser
  FDR3_USERNAME: fdr3
  FDR3_SCHEMA: fdr3

stages:
  - stage: initialization_jobs
    displayName: "Init ${{ parameters.k8sEnv }}"
    jobs:
      - job: initialization
        pool: $(poolImage)
        displayName: "Schemas creation job"
        steps:
          - task: AzureKeyVault@2
            displayName: "Get secrets"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              keyVaultName: $(KEY_VAULT_NAME)
              secretsFilter: 'db-administrator-login-password,db-fdr3-password'
          - task: AzureCLI@2
            displayName: "create all schemas"
            inputs:
              azureSubscription: $(AZURE_SERVICE_CONNECTION)
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |

                create_schema () {
                  SCHEMA=$1
                  USER=$2
                  PASS=$3
                  az config set extension.use_dynamic_install=yes_without_prompt
                  az postgres flexible-server execute --name $(DB_HOST) --admin-user $(ADMIN_USERNAME) \
                  --admin-password '$(db-administrator-login-password)' --database-name "$(DATABASE_NAME)" \
                  --querytext "
                  do \$\$
                  BEGIN
                  IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$USER') THEN
                  CREATE ROLE $USER LOGIN PASSWORD '$PASS';
                  END IF;

                  GRANT ALL PRIVILEGES ON DATABASE \"$DATABASE_NAME\" TO \"$USER\";
                  GRANT \"$USER\" to $ADMIN_USERNAME;
                  CREATE SCHEMA IF NOT EXISTS \"$SCHEMA\" AUTHORIZATION \"$USER\";
                  END
                  \$\$;
                  "
                }

                create_schema "$FDR3_SCHEMA"     "$FDR3_USERNAME"     "$(db-fdr3-password)"
