pr: none
trigger: none
#trigger:
#  - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: env
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prd
  # version of liquibase db.changelog-master-*.xml to run
  - name: dbVersion
    displayName: Database Version
    type: string
    default: '1.0.0'

  # liquibase context to run specific changelogs,default to '_' to run only uncontexted changelogs
  - name: lbContexts
    displayName: Liquibase Contexts
    type: string
    default: '_'
  # liquibase log level if needed finer logs
  - name: lbLogLevel
    displayName: Liquibase Log Level
    type: string
    default: INFO
    values:
      - INFO
      - FINE
      - WARNING
      - SEVERE

variables:
  ${{ if eq(parameters.env, 'dev') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_APPLY_NAME_DEV)'
    poolImage: 'pagopa-dev-linux-infra'
    REQUIRE_VALIDATION: false
    ENV: 'd'
  ${{ elseif eq(parameters.env, 'uat') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_APPLY_NAME_UAT)'
    poolImage: 'pagopa-uat-linux-infra'
    REQUIRE_VALIDATION: false
    ENV: 'u'
  ${{ elseif eq(parameters.env, 'prd') }}:
    AZURE_SERVICE_CONNECTION: '$(TF_AZURE_SERVICE_CONNECTION_APPLY_NAME_PROD)'
    poolImage: 'pagopa-prod-linux-infra'
    REQUIRE_VALIDATION: true
    ENV: 'p'

  APPROVE_NOTIFY_ADMIN: '[pagoPA-iac]\Project Administrators'
  LIQUIBASE_FOLDER: 'analytics-addon'
  NODO_JDBC_URL: jdbc:postgresql://pagopa-${{ variables.ENV }}-weu-nodo-flexible-postgresql.postgres.database.azure.com:5432/nodo?sslmode=require&prepareThreshold=0
  NODO_KEY_VAULT_NAME: pagopa-${{ variables.ENV }}-nodo-kv
  NODO_CFG_USERNAME: cfg
  NODO_CFG_SCHEMA: cfg
  NODO_CFG_KV_KEY: db-cfg-password
  NODO_OFFLINE_USERNAME: offline
  NODO_OFFLINE_SCHEMA: offline
  NODO_OFFLINE_KV_KEY: db-offline-password
  NODO_ONLINE_USERNAME: online
  NODO_ONLINE_SCHEMA: online
  NODO_ONLINE_KV_KEY: db-online-password
  NODO_RE_USERNAME: re
  NODO_RE_SCHEMA: re
  NODO_RE_KV_KEY: db-re-password


  CRUSC8_JDBC_URL: jdbc:postgresql://pagopa-${{ variables.ENV }}-itn-crusc8-flexible-postgresql.postgres.database.azure.com:5432/cruscotto?sslmode=require&prepareThreshold=0
  CRUSC8_KV_NAME: pagopa-${{ variables.ENV }}-itn-crusc8-kv
  CRUSC8_KV_KEY: db-cruscotto-password
  CRUSC8_USERNAME: cruscotto
  CRUSC8_SCHEMA: cruscotto

  FDR_JDBC_URL: jdbc:postgresql://pagopa-${{ variables.ENV }}-weu-fdr-flexible-postgresql.postgres.database.azure.com:5432/cruscotto?sslmode=require&prepareThreshold=0
  FDR_KV_NAME: pagopa-${{ variables.ENV }}-fdr-kv
  FDR_FDR1_KV_KEY: db-fdr-password
  FDR_FDR1_USERNAME: fdr
  FDR_FDR1_SCHEMA: fdr
  FDR_FDR3_KV_KEY: db-fdr3-password
  FDR_FDR3_USERNAME: fdr3
  FDR_FDR3_SCHEMA: fdr3

  GPD_JDBC_URL: jdbc:postgresql://pagopa-${{ variables.ENV }}-weu-gpd-pgflex.postgres.database.azure.com:5432/apd?sslmode=require&prepareThreshold=0
  GPD_KV_NAME: pagopa-${{ variables.ENV }}-gps-kv
  GPD_KV_KEY: db-apd-user-password
  GPD_USERNAME: apduser
  GPD_SCHEMA: apd

stages:
  - stage: liquibase_status
    displayName: "Liquibase status"
    jobs:
      - job: liquibase_status_job
        pool: $(poolImage)
        displayName: "Liquibase status and validation"
        steps:
          - checkout: self
          - script: |
              cd $(Pipeline.Workspace)
              mkdir liquibase-app
              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
              rm -rf liquibase-4.17.1.tar.gz
              ls -la liquibase-app
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
            displayName: "Install Liquibase"
          - script: |
              cd $(Pipeline.Workspace)
              mkdir java
              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
              ls -la java
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
            displayName: "Install Java"
          - script: |
              if [ ! -f src/psql/${{ variables.LIQUIBASE_FOLDER }}/changelog_v${{ parameters.dbVersion }}.properties ]; then
                echo "Version ${{ parameters.dbVersion }} not defined"
                echo "File changelog_v${{ parameters.dbVersion }}.properties not found in folder ${{ variables.LIQUIBASE_FOLDER }}!"
                echo "##vso[task.setvariable variable=version_present]false"
                exit 1
              else
                echo "File changelog_v${{ parameters.dbVersion }}.properties found in folder ${{ variables.LIQUIBASE_FOLDER }}!"
                source src/psql/${{ variables.LIQUIBASE_FOLDER }}/changelog_v${{ parameters.dbVersion }}.properties
                echo "##vso[task.setvariable variable=version_present]true"
                echo "##vso[task.setvariable variable=gpd_apd]${gpd_apd}"
                echo "##vso[task.setvariable variable=nodo_cfg]${nodo_cfg}"
              fi
            displayName: "Load database specific versions"
          - template: ./templates/generic-liquibase-status-with-kv.yml
            parameters:
              DATABASE_NAME: nodo
              SCHEMA: $(NODO_CFG_SCHEMA)
              LIQUIBASE_FOLDER: $(LIQUIBASE_FOLDER)
              LIQUIBASE_DB_VERSION: "$(nodo_cfg)"
              JDBC_URL: $(NODO_JDBC_URL)
              USERNAME: $(NODO_CFG_USERNAME)
              KV_NAME: $(NODO_KEY_VAULT_NAME)
              PASSWORD_KV_KEY: ${{variables.NODO_CFG_KV_KEY}}
              AZURE_SERVICE_CONNECTION: $(AZURE_SERVICE_CONNECTION)
              lbContexts: ${{ parameters.lbContexts }}
              lbLogLevel: ${{ parameters.lbLogLevel }}
#      - job: approval
#        dependsOn: liquibase_status_job
#        condition: and(eq('${{ variables.REQUIRE_VALIDATION }}', 'true'), succeeded())
#        pool: server
#        displayName: "Approval"
#        timeoutInMinutes: 16
#        steps:
#          - task: ManualValidation@0
#            timeoutInMinutes: 15
#            inputs:
#              notifyUsers: |
#                $(APPROVE_NOTIFY_ADMIN)
#              instructions: "Please check liquibase status and validation for each database and resume if correct"
#              onTimeout: 'reject'
#      - job: initialization
#        pool: $(poolImage)
#        ${{ if eq(variables.REQUIRE_VALIDATION, 'true') }}:
#          dependsOn: [liquibase_status_job,approval]
#        ${{ else }}:
#          dependsOn: [liquibase_status_job]
#        condition: succeeded()
#        displayName: "Update nodo DB ${{ parameters.env }}"
#        steps:
#          - checkout: self
#            clean: true
#            persistCredentials: true
#          - script: |
#              cd $(Pipeline.Workspace)
#              mkdir liquibase-app
#              wget -c https://github.com/liquibase/liquibase/releases/download/v4.17.1/liquibase-4.17.1.tar.gz
#              tar -xzf liquibase-4.17.1.tar.gz -C liquibase-app
#              rm -rf liquibase-4.17.1.tar.gz
#              ls -la liquibase-app
#              echo "##vso[task.prependpath]$(Pipeline.Workspace)/liquibase-app"
#            displayName: "Install Liquibase"
#          - script: |
#              cd $(Pipeline.Workspace)
#              mkdir java
#              wget -c https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz
#              tar -xzf openjdk-11.0.2_linux-x64_bin.tar.gz -C java
#              rm -rf openjdk-11.0.2_linux-x64_bin.tar.gz
#              ls -la java
#              echo "##vso[task.prependpath]$(Pipeline.Workspace)/java/jdk-11.0.2/bin"
#              echo "##vso[task.setvariable variable=JAVA_HOME;]$(Pipeline.Workspace)/java/jdk-11.0.2"
#            displayName: "Install Java"
#          - template: ./templates/generic-liquibase-apply-with-kv.yml
#            parameters:
#              DATABASE_NAME: nodo
#              SCHEMA: $(NODO_CFG_SCHEMA)
#              LIQUIBASE_FOLDER: $(LIQUIBASE_FOLDER)
#              LIQUIBASE_DB_VERSION: ${{ parameters.dbVersion }}
#              JDBC_URL: $(NODO_JDBC_URL)
#              USERNAME: $(NODO_CFG_USERNAME)
#              PASSWORD_KV_KEY: $(NODO_CFG_KV_KEY)
#              AZURE_SERVICE_CONNECTION: $(AZURE_SERVICE_CONNECTION)
#              lbContexts: ${{ parameters.lbContexts }}
#              lbLogLevel: ${{ parameters.lbLogLevel }}
